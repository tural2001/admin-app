{"ast":null,"code":"/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n  var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromTranslation(transMat, v);\n  return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n  var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromRotation(rotateMat, rad);\n  return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n  var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromScaling(scaleMat, v);\n  return mat3.multiply(out, scaleMat, a);\n}\nfunction leftMultiply(out, a, a1) {\n  return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nexport function transform(m, actions) {\n  var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  for (var i = 0, len = actions.length; i < len; i++) {\n    var action = actions[i];\n    switch (action[0]) {\n      case 't':\n        leftTranslate(matrix, matrix, [action[1], action[2]]);\n        break;\n      case 's':\n        leftScale(matrix, matrix, [action[1], action[2]]);\n        break;\n      case 'r':\n        leftRotate(matrix, matrix, action[1]);\n        break;\n      case 'm':\n        leftMultiply(matrix, matrix, action[1]);\n        break;\n      default:\n        break;\n    }\n  }\n  return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nexport function direction(v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nexport function angleTo(v1, v2, direct) {\n  var ang = vec2.angle(v1, v2);\n  var angleLargeThanPI = direction(v1, v2) >= 0;\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - ang;\n    }\n    return ang;\n  }\n  if (angleLargeThanPI) {\n    return ang;\n  }\n  return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nexport function vertical(out, v, flag) {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n  return out;\n}","map":{"version":3,"names":["mat3","vec2","leftTranslate","out","a","v","transMat","fromTranslation","multiply","leftRotate","rad","rotateMat","fromRotation","leftScale","scaleMat","fromScaling","leftMultiply","a1","transform","m","actions","matrix","concat","i","len","length","action","direction","v1","v2","angleTo","direct","ang","angle","angleLargeThanPI","Math","PI","vertical","flag"],"sources":["/Users/turalmammadov/Downloads/MERN/admin-app/site/node_modules/@antv/matrix-util/src/ext.ts"],"sourcesContent":["/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\n\ntype mat3Type = [number, number, number, number, number, number, number, number, number];\n\nexport function leftTranslate(out, a, v) {\n  const transMat: mat3Type = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n  mat3.fromTranslation(transMat, v);\n  return mat3.multiply(out, transMat, a);\n}\n\nexport function leftRotate(out, a, rad) {\n  const rotateMat: mat3Type = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n  mat3.fromRotation(rotateMat, rad);\n  return mat3.multiply(out, rotateMat, a);\n}\n\nexport function leftScale(out, a, v) {\n  const scaleMat: mat3Type = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n  mat3.fromScaling(scaleMat, v);\n  return mat3.multiply(out, scaleMat, a);\n}\n\nfunction leftMultiply(out, a, a1) {\n  return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nexport function transform(m: number[], actions: any[][]) {\n  const matrix = m ? [].concat(m) : [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\n  for (let i = 0, len = actions.length; i < len; i++) {\n    const action = actions[i];\n    switch (action[0]) {\n      case 't':\n        leftTranslate(matrix, matrix, [ action[1], action[2] ]);\n        break;\n      case 's':\n        leftScale(matrix, matrix, [ action[1], action[2] ]);\n        break;\n      case 'r':\n        leftRotate(matrix, matrix, action[1]);\n        break;\n      case 'm':\n        leftMultiply(matrix, matrix, action[1]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return matrix;\n}\n\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nexport function direction(v1: number[], v2: number[]): number {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nexport function angleTo(v1: [number, number], v2: [number, number], direct: boolean): number {\n  const ang = vec2.angle(v1, v2);\n  const angleLargeThanPI = direction(v1, v2) >= 0;\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - ang;\n    }\n    return ang;\n  }\n\n  if (angleLargeThanPI) {\n    return ang;\n  }\n  return Math.PI * 2 - ang;\n}\n\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nexport function vertical(out: number[], v: number[], flag: boolean): number[] {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n\n  return out;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}